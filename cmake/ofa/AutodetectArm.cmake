#=============================================================================
# Autodetection of ARM / ARM64 CPUs
#
# This is a two-step process:
#
# 1. Get the CPUID from the system by reading /proc/cpuconfig (on
# Linux), the system registry (on Windows), or executing an
# OS-specific command (macOS, BSD, SunOS, ...)
#
# 2. Determine the specific CPU from the CPUID
#=============================================================================

macro(OFA_AutodetectArm)
  set(_cpu_implementer)
  set(_cpu_architecture)
  set(_cpu_variant)
  set(_cpu_part)
  set(_cpu_revision)

  # Get CPUID from system
  if(CMAKE_SYSTEM_NAME STREQUAL "Linux")

    # Linux
    file(READ "/proc/cpuinfo" _cpuinfo)
    string(REGEX REPLACE ".*CPU implementer[ \t]*:[ \t]+([a-zA-Z0-9_-]+).*" "\\1" _cpu_implementer "${_cpuinfo}")
    string(REGEX REPLACE ".*CPU architecture[ \t]*:[ \t]+([a-zA-Z0-9_-]+).*" "\\1" _cpu_architecture "${_cpuinfo}")
    string(REGEX REPLACE ".*CPU variant[ \t]*:[ \t]+([a-zA-Z0-9_-]+).*" "\\1" _cpu_variant "${_cpuinfo}")
    string(REGEX REPLACE ".*CPU part[ \t]*:[ \t]+([a-zA-Z0-9_-]+).*" "\\1" _cpu_part "${_cpuinfo}")
    string(REGEX REPLACE ".*CPU revision[ \t]*:[ \t]+([a-zA-Z0-9_-]+).*" "\\1" _cpu_revision "${_cpuinfo}")
    string(REGEX REPLACE ".*Features[ \t]*:[ \t]+([^\n]+).*" "\\1" _cpu_flags "${_cpuinfo}")
    
  elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")

    # macOS
    exec_program("/usr/sbin/sysctl -n hw.cputype hw.cputype hw.cpusubtype hw.cpufamily hw.cpusubfamily"
      OUTPUT_VARIABLE _sysctl_output_string RETURN_VALUE _error)
    if(NOT _error)
      string(REPLACE "\n" ";" _sysctl_output ${_sysctl_output_string})
      list(GET _sysctl_output 0 _cpu_implementer)
      list(GET _sysctl_output 1 _cpu_architecture)
      list(GET _sysctl_output 2 _cpu_variant)
      list(GET _sysctl_output 3 _cpu_part)
      list(GET _sysctl_output 4 _cpu_revision)
    endif()
    if(_error)
      message(WARNING "Auto-detection of optimization flags failed and will use the generic CPU settings.")
    endif()

    # TODO: Windows, FreeBSD, ...
    
  else()
    
    message(FATAL_ERROR "OptimizeForArchitecture.cmake does not implement support for CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME}")
  endif()

  # Determine CPU from CPUID
  # Taken from https://github.com/karelzak/util-linux/blob/master/sys-utils/lscpu-arm.c
  # and https://gcc.gnu.org/onlinedocs/gcc/ARM-Options.html

  # ARM
  if(_cpu_implementer STREQUAL "0x41")
    if(_cpu_part STREQUAL "0x810")
      set(TARGET_ARCHITECTURE "arm810")
    elseif(_cpu_part STREQUAL "0x920")
      set(TARGET_ARCHITECTURE "arm920t")
    elseif(_cpu_part STREQUAL "0x922")
      set(TARGET_ARCHITECTURE "arm922t")
    elseif(_cpu_part STREQUAL "0x926")
      set(TARGET_ARCHITECTURE "arm926ej-s")
    elseif(_cpu_part STREQUAL "0x940")
      set(TARGET_ARCHITECTURE "arm940t")
    elseif(_cpu_part STREQUAL "0x946")
      set(TARGET_ARCHITECTURE "arm946e-s")
    elseif(_cpu_part STREQUAL "0x966")
      set(TARGET_ARCHITECTURE "arm966e-s")
    elseif(_cpu_part STREQUAL "0xa20")
      set(TARGET_ARCHITECTURE "arm1020e")
    elseif(_cpu_part STREQUAL "0xa22")
      set(TARGET_ARCHITECTURE "arm1022e")
    elseif(_cpu_part STREQUAL "0xa26")
      set(TARGET_ARCHITECTURE "arm1026ej-s")
    elseif(_cpu_part STREQUAL "0xb02")
      set(TARGET_ARCHITECTURE "mpcore")
    elseif(_cpu_part STREQUAL "0xb36")
      set(TARGET_ARCHITECTURE "arm1136jf-s")
    elseif(_cpu_part STREQUAL "0xb56")
      set(TARGET_ARCHITECTURE "arm1156t2f-s")
    elseif(_cpu_part STREQUAL "0xb76")
      set(TARGET_ARCHITECTURE "arm1176jzf-s")
    elseif(_cpu_part STREQUAL "0xc05")
      set(TARGET_ARCHITECTURE "cortex-a5")
    elseif(_cpu_part STREQUAL "0xc07")
      set(TARGET_ARCHITECTURE "cortex-a7")
    elseif(_cpu_part STREQUAL "0xc08")
      set(TARGET_ARCHITECTURE "cortex-a8")
    elseif(_cpu_part STREQUAL "0xc09")
      set(TARGET_ARCHITECTURE "cortex-a9")
    elseif(_cpu_part STREQUAL "0xc0d")
      set(TARGET_ARCHITECTURE "cortex-a12")
    elseif(_cpu_part STREQUAL "0xc0f")
      set(TARGET_ARCHITECTURE "cortex-a15")
    elseif(_cpu_part STREQUAL "0xc0e")
      set(TARGET_ARCHITECTURE "cortex-a17")
    elseif(_cpu_part STREQUAL "0xc14")
      set(TARGET_ARCHITECTURE "cortex-r4f")
    elseif(_cpu_part STREQUAL "0xc15")
      set(TARGET_ARCHITECTURE "cortex-r5")
    elseif(_cpu_part STREQUAL "0xc17")
      set(TARGET_ARCHITECTURE "cortex-r7")
    elseif(_cpu_part STREQUAL "0xc18")
      set(TARGET_ARCHITECTURE "cortex-r8")
    elseif(_cpu_part STREQUAL "0xc20")
      set(TARGET_ARCHITECTURE "cortex-m0")
    elseif(_cpu_part STREQUAL "0xc21")
      set(TARGET_ARCHITECTURE "cortex-m1")
    elseif(_cpu_part STREQUAL "0xc23")
      set(TARGET_ARCHITECTURE "cortex-m3")
    elseif(_cpu_part STREQUAL "0xc24")
      set(TARGET_ARCHITECTURE "cortex-m4")
    elseif(_cpu_part STREQUAL "0xc27")
      set(TARGET_ARCHITECTURE "cortex-m7")
    elseif(_cpu_part STREQUAL "0xc60")
      set(TARGET_ARCHITECTURE "cortex-m0plus")
    elseif(_cpu_part STREQUAL "0xd01")
      set(TARGET_ARCHITECTURE "cortex-a32")
    elseif(_cpu_part STREQUAL "0xd02")
      set(TARGET_ARCHITECTURE "cortex-a34")
    elseif(_cpu_part STREQUAL "0xd03")
      set(TARGET_ARCHITECTURE "cortex-a53")
    elseif(_cpu_part STREQUAL "0xd04")
      set(TARGET_ARCHITECTURE "cortex-a35")
    elseif(_cpu_part STREQUAL "0xd05")
      set(TARGET_ARCHITECTURE "cortex-a55")
    elseif(_cpu_part STREQUAL "0xd07")
      set(TARGET_ARCHITECTURE "cortex-a57")
    elseif(_cpu_part STREQUAL "0xd08")
      set(TARGET_ARCHITECTURE "cortex-a72")
    elseif(_cpu_part STREQUAL "0xd09")
      set(TARGET_ARCHITECTURE "cortex-a73")
    elseif(_cpu_part STREQUAL "0xd0a")
      set(TARGET_ARCHITECTURE "cortex-a75")
    elseif(_cpu_part STREQUAL "0xd0b")
      set(TARGET_ARCHITECTURE "cortex-a76")
    elseif(_cpu_part STREQUAL "0xd0c")
      set(TARGET_ARCHITECTURE "neoverse-n1")
    elseif(_cpu_part STREQUAL "0xd0d")
      set(TARGET_ARCHITECTURE "cortex-a77")
    elseif(_cpu_part STREQUAL "0xd0e")
      set(TARGET_ARCHITECTURE "cortex-a76ae")
    elseif(_cpu_part STREQUAL "0xd13")
      set(TARGET_ARCHITECTURE "cortex-r52")
    elseif(_cpu_part STREQUAL "0xd20")
      set(TARGET_ARCHITECTURE "cortex-m23")
    elseif(_cpu_part STREQUAL "0xd21")
      set(TARGET_ARCHITECTURE "cortex-m33")
    elseif(_cpu_part STREQUAL "0xd40")
      set(TARGET_ARCHITECTURE "neoverse-v1")
    elseif(_cpu_part STREQUAL "0xd41")
      set(TARGET_ARCHITECTURE "cortex-a78")
    elseif(_cpu_part STREQUAL "0xd42")
      set(TARGET_ARCHITECTURE "cortex-a78ae")
    elseif(_cpu_part STREQUAL "0xd44")
      set(TARGET_ARCHITECTURE "cortex-x1")
    elseif(_cpu_part STREQUAL "0xd46")
      set(TARGET_ARCHITECTURE "cortex-a510")
    elseif(_cpu_part STREQUAL "0xd47")
      set(TARGET_ARCHITECTURE "cortex-a710")
    elseif(_cpu_part STREQUAL "0xd48")
      set(TARGET_ARCHITECTURE "cortex-x2")
    elseif(_cpu_part STREQUAL "0xd49")
      set(TARGET_ARCHITECTURE "neoverse-n2")
    elseif(_cpu_part STREQUAL "0xd4a")
      set(TARGET_ARCHITECTURE "neoverse-e1")
    elseif(_cpu_part STREQUAL "0xd4b")
      set(TARGET_ARCHITECTURE "cortex-a78c")
    endif()

  # Broadcom
  elseif(_cpu_implementer STREQUAL "0x42")
    if(_cpu_part STREQUAL "0x0f")
      set(TARGET_ARCHITECTURE "brahma-b15")
    elseif(_cpu_part STREQUAL "0x100")
      set(TARGET_ARCHITECTURE "brahma-b53")
    elseif(_cpu_part STREQUAL "0x516")
      set(TARGET_ARCHITECTURE "thunderx2")
    endif()

  # Cavium
  elseif(_cpu_implementer STREQUAL "0x43")
    if(_cpu_part STREQUAL "0x0a0")
      set(TARGET_ARCHITECTURE "thunderx")
    elseif(_cpu_part STREQUAL "0x0a1")
      set(TARGET_ARCHITECTURE "thunderxt88")
    elseif(_cpu_part STREQUAL "0x0a2")
      set(TARGET_ARCHITECTURE "thunderxt81")
    elseif(_cpu_part STREQUAL "0x0a3")
      set(TARGET_ARCHITECTURE "thunderxt83")
    elseif(_cpu_part STREQUAL "0x0af")
      set(TARGET_ARCHITECTURE "thunderx2t99")
    endif()

  # DEC
  elseif(_cpu_implementer STREQUAL "0x44")
    if(_cpu_part STREQUAL "0xa10")
      set(TARGET_ARCHITECTURE "strongarm110")
    elseif(_cpu_part STREQUAL "0xa11")
      set(TARGET_ARCHITECTURE "strongarm1100")
    endif()

  # FUJITSU
  elseif(_cpu_implementer STREQUAL "0x46")
    if(_cpu_part STREQUAL "0x001")
      set(TARGET_ARCHITECTURE "a64fx")
    endif()

  # HiSilicon
  elseif(_cpu_implementer STREQUAL "0x48")
    if(_cpu_part STREQUAL "0xd01")
      set(TARGET_ARCHITECTURE "tsv110")
    endif()

  # Infineon
  elseif(_cpu_implementer STREQUAL "0x49")

  # Motorola/Freescale
  elseif(_cpu_implementer STREQUAL "0x4d")

  # Nvidia
  elseif(_cpu_implementer STREQUAL "0x4e")
    if(_cpu_part STREQUAL "0x000")
      set(TARGET_ARCHITECTURE "denver")
    elseif(_cpu_part STREQUAL "0x003")
      set(TARGET_ARCHITECTURE "denver2")
    elseif(_cpu_part STREQUAL "0x004")
      set(TARGET_ARCHITECTURE "carmel")
    endif()

  # APM
  elseif(_cpu_implementer STREQUAL "0x50")
    if(_cpu_part STREQUAL "0x000")
      set(TARGET_ARCHITECTURE "xgene1")
    endif()

  # Qualcomm
  elseif(_cpu_implementer STREQUAL "0x51")
    if(_cpu_part STREQUAL "0x00f")
      set(TARGET_ARCHITECTURE "scorpion")
    elseif(_cpu_part STREQUAL "0x02d")
      set(TARGET_ARCHITECTURE "scorpion")
    elseif(_cpu_part STREQUAL "0x04d")
      set(TARGET_ARCHITECTURE "krait")
    elseif(_cpu_part STREQUAL "0x06f")
      set(TARGET_ARCHITECTURE "krait")
    elseif(_cpu_part STREQUAL "0x201")
      set(TARGET_ARCHITECTURE "kryo")
    elseif(_cpu_part STREQUAL "0x205")
      set(TARGET_ARCHITECTURE "kryo")
    elseif(_cpu_part STREQUAL "0x211")
      set(TARGET_ARCHITECTURE "kryo")
    elseif(_cpu_part STREQUAL "0x800")
      set(TARGET_ARCHITECTURE "falkor")
    elseif(_cpu_part STREQUAL "0x801")
      set(TARGET_ARCHITECTURE "kryo2")
    elseif(_cpu_part STREQUAL "0xc00")
      set(TARGET_ARCHITECTURE "falkor")
    elseif(_cpu_part STREQUAL "0xc01")
      set(TARGET_ARCHITECTURE "saphira")
    endif()

  # Samsung
  elseif(_cpu_implementer STREQUAL "0x53")
    if(_cpu_part STREQUAL "0x001")
      set(TARGET_ARCHITECTURE "exynos-m1")
    endif()

  # Marvell
  elseif(_cpu_implementer STREQUAL "0x56")
    if(_cpu_part STREQUAL "0x131")
      set(TARGET_ARCHITECTURE "marvell-f")
    elseif(_cpu_part STREQUAL "0x581")
      set(TARGET_ARCHITECTURE "marvell-pj4")
    elseif(_cpu_part STREQUAL "0x584")
      set(TARGET_ARCHITECTURE "marvell-pj4")
    endif()

  # Apple
  elseif(_cpu_implementer STREQUAL "0x61")
    if(_cpu_part STREQUAL "0x022")
      set(TARGET_ARCHITECTURE "icestorm")
    elseif(_cpu_part STREQUAL "0x023")
      set(TARGET_ARCHITECTURE "firestorm")
    endif()

  # Faraday
  elseif(_cpu_implementer STREQUAL "0x66")
    if(_cpu_part STREQUAL "0x526")
      set(TARGET_ARCHITECTURE "fa526")
    elseif(_cpu_part STREQUAL "0x626")
      set(TARGET_ARCHITECTURE "fa626")
    endif()

  # Intel
  elseif(_cpu_implementer STREQUAL "0x69")
    if(_cpu_part STREQUAL "0x200")
      set(TARGET_ARCHITECTURE "i80200")
    elseif(_cpu_part STREQUAL "0x210")
      set(TARGET_ARCHITECTURE "pxa250a")
    elseif(_cpu_part STREQUAL "0x212")
      set(TARGET_ARCHITECTURE "pxa210a")
    elseif(_cpu_part STREQUAL "0x242")
      set(TARGET_ARCHITECTURE "i80321-400")
    elseif(_cpu_part STREQUAL "0x243")
      set(TARGET_ARCHITECTURE "i80321-600")
    elseif(_cpu_part STREQUAL "0x290")
      set(TARGET_ARCHITECTURE "pxa250b")
    elseif(_cpu_part STREQUAL "0x292")
      set(TARGET_ARCHITECTURE "pxa210b")
    elseif(_cpu_part STREQUAL "0x2c2")
      set(TARGET_ARCHITECTURE "i80321-400-b0")
    elseif(_cpu_part STREQUAL "0x2c3")
      set(TARGET_ARCHITECTURE "i80321-600-b0")
    elseif(_cpu_part STREQUAL "0x2d0")
      set(TARGET_ARCHITECTURE "pxa250c")
    elseif(_cpu_part STREQUAL "0x2d2")
      set(TARGET_ARCHITECTURE "pxa210c")
    elseif(_cpu_part STREQUAL "0x411")
      set(TARGET_ARCHITECTURE "pxa27x")
    elseif(_cpu_part STREQUAL "0x41c")
      set(TARGET_ARCHITECTURE "ipx425-533")
    elseif(_cpu_part STREQUAL "0x41d")
      set(TARGET_ARCHITECTURE "ipx425-400")
    elseif(_cpu_part STREQUAL "0x41f")
      set(TARGET_ARCHITECTURE "ipx425-266")
    elseif(_cpu_part STREQUAL "0x682")
      set(TARGET_ARCHITECTURE "pxa32x")
    elseif(_cpu_part STREQUAL "0x683")
      set(TARGET_ARCHITECTURE "pxa930")
    elseif(_cpu_part STREQUAL "0x688")
      set(TARGET_ARCHITECTURE "pxa30x")
    elseif(_cpu_part STREQUAL "0x689")
      set(TARGET_ARCHITECTURE "pxa31x")
    elseif(_cpu_part STREQUAL "0xb11")
      set(TARGET_ARCHITECTURE "sa1110")
    elseif(_cpu_part STREQUAL "0xc12")
      set(TARGET_ARCHITECTURE "ipx1200")
    endif()

  # Phytium
  elseif(_cpu_implementer STREQUAL "0x70")
    if(_cpu_part STREQUAL "0x662")
      set(TARGET_ARCHITECTURE "ftc662")
    elseif(_cpu_part STREQUAL "0x663")
      set(TARGET_ARCHITECTURE "ftc663")
    endif()

  # Ampere
  elseif(_cpu_implementer STREQUAL "0xc0")

  # Taken from /Library/Developer/CommandLineTools/SDKs/MacOSX12.sdk/System/Library/Frameworks/Kernel.framework/Versions/A/Headers/mach/machine.h
  elseif(_cpu_implementer STREQUAL "16777228" OR _cpu_implementer STREQUAL "0x100000C")    # Apple ARM64
    if(    _cpu_part STREQUAL "0x1e2d6381" OR _cpu_part STREQUAL "506291073")              # Swift (A6)
      set(TARGET_ARCHITECTURE "apple-a6")
    elseif(_cpu_part STREQUAL "0x37a09642" OR _cpu_part STREQUAL "933271106")              # Cyclone (A7)
      set(TARGET_ARCHITECTURE "apple-a7")
    elseif(_cpu_part STREQUAL "0x2c91a47e" OR _cpu_part STREQUAL "747742334")              # Typhoon (A8)
      set(TARGET_ARCHITECTURE "apple-a8")
    elseif(_cpu_part STREQUAL "0x92fb37c8" OR _cpu_part STREQUAL "2465937352")             # Twister (A9)
      set(TARGET_ARCHITECTURE "apple-a9")
    elseif(_cpu_part STREQUAL "0x67ceee93" OR _cpu_part STREQUAL "1741614739")             # Hurrican (A10)
      set(TARGET_ARCHITECTURE "apple-a10")
    elseif(_cpu_part STREQUAL "0xe81e7ef6" OR _cpu_part STREQUAL "3894312694")             # Monsoon Mistral (A11)
      set(TARGET_ARCHITECTURE "apple-a11")
    elseif(_cpu_part STREQUAL "0x07d34b9f" OR _cpu_part STREQUAL "131287967")              # Vortex Tempest (A12)
      set(TARGET_ARCHITECTURE "apple-a12")
    elseif(_cpu_part STREQUAL "0x462504d2" OR _cpu_part STREQUAL "1176831186")             # Lightning Thunder (A13)
      set(TARGET_ARCHITECTURE "apple-a13")
    elseif(_cpu_part STREQUAL "0x1b588bb3" OR _cpu_part STREQUAL "458787763")              # Firestorm Icestorm (A14 / M1 / M1 Pro / M1 Max / M1 Ultra)
      set(TARGET_ARCHITECTURE "apple-m1")
    elseif(_cpu_part STREQUAL "0xda33d83d" OR _cpu_part STREQUAL "3660830781")             # Blizzard Avalanche (A15 / M2 / M2 Pro / M2 Max)
      set(TARGET_ARCHITECTURE "apple-m2")
    elseif(_cpu_part STREQUAL "0x8765edea" OR _cpu_part STREQUAL "2271604202")             # Everest Sawtooth (A16)
      set(TARGET_ARCHITECTURE "apple-a16")
    endif()

  else()
    message(WARNING "Auto-detection of optimization flags failed and will use the generic CPU settings.")
    return()
  endif()

  if(OFA_VERBOSE)
    message(STATUS "CPU implementer:  ${_cpu_implementer}")
    message(STATUS "CPU architecture: ${_cpu_architecture}")
    message(STATUS "CPU variant:      ${_cpu_variant}")
    message(STATUS "CPU part:         ${_cpu_part}")
    message(STATUS "CPU revision:     ${_cpu_revision}")
  endif()
endmacro(OFA_AutodetectArm)
