#=============================================================================
# Handling of ARM / ARM64 options
#
# This is a three-step process:
#
# 1. Generate a list of available compiler flags for the specific CPU
#
# 2. Enable/disable feature flags based on available CPU features,
#    used-defined USE_<feature> variables and the capabilities of the
#    host system's compiler and linker
#
# 3. Set compiler-specific flags (e.g., -m<feature>/-mno-<feature>)
#=============================================================================

include(ofa/CommonMacros)

macro(OFA_HandleArmOptions)

  # Special treatment for "native" flag
  if(TARGET_ARCHITECTURE STREQUAL "native")
    if(MSVC)
      # MSVC (on Windows)
      message(FATAL_ERROR "[OFA] MSVC does not support \"native\" flag.")
    elseif(CMAKE_CXX_COMPILER_ID MATCHES "NVHPC"
        OR CMAKE_CXX_COMPILER_ID MATCHES "PGI")
      # NVidia HPC / PGI (on Linux/Windows)
      AddCompilerFlag("-tp=native" CXX_FLAGS ARCHITECTURE_CXX_FLAGS RESULT _ok)
    elseif(CMAKE_CXX_COMPILER_ID MATCHES "Cray")
      # Cray (on Linux)
      message(FATAL_ERROR, "[OFA] Cray compiler does not support \"native\" flag.")
    else()
      # Others: GNU, Clang and variants
      AddCXXCompilerFlag("-mcpu=native" FLAGS ARCHITECTURE_CXX_FLAGS RESULT _ok)
    endif()

    if(NOT _ok)
      message(FATAL_ERROR "[OFA] An error occured while setting the \"native\" flag.")
    endif()

  elseif(NOT TARGET_ARCHITECTURE STREQUAL "none")

    # Step 1: Generate a list of compiler flags for the specific CPU
    set(_march_flag_list)
    set(_mtune_flag_list)
    set(_available_extension_list)

    # ARM
    if(TARGET_ARCHITECTURE STREQUAL "strongarm")
      list(APPEND _mtune_flag_list "strongarm")
      list(APPEND _march_flag_list "armv4")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm8")
      list(APPEND _mtune_flag_list "arm8")
      list(APPEND _march_flag_list "armv4")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm810")
      list(APPEND _mtune_flag_list "arm810")
      list(APPEND _march_flag_list "armv4")
    elseif(TARGET_ARCHITECTURE STREQUAL "fa526")
      list(APPEND _mtune_flag_list "fa526")
      list(APPEND _march_flag_list "armv4")
    elseif(TARGET_ARCHITECTURE STREQUAL "fa626")
      list(APPEND _mtune_flag_list "fa626")
      list(APPEND _march_flag_list "armv4")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm7tdmi")
      list(APPEND _mtune_flag_list "arm7tdmi")
      list(APPEND _march_flag_list "armv4t")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm7tdmi-s")
      list(APPEND _mtune_flag_list "arm7tdmi-s")
      list(APPEND _march_flag_list "armv4t")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm710t")
      list(APPEND _mtune_flag_list "arm710t")
      list(APPEND _march_flag_list "armv4t")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm720t")
      list(APPEND _mtune_flag_list "arm720t")
      list(APPEND _march_flag_list "armv4t")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm740t")
      list(APPEND _mtune_flag_list "arm740t")
      list(APPEND _march_flag_list "armv4t")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm9")
      list(APPEND _mtune_flag_list "arm9")
      list(APPEND _march_flag_list "armv4t")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm9tdmi")
      list(APPEND _mtune_flag_list "arm9tdmi")
      list(APPEND _march_flag_list "armv4t")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm920")
      list(APPEND _mtune_flag_list "arm920")
      list(APPEND _march_flag_list "armv4t")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm920t")
      list(APPEND _mtune_flag_list "arm920t")
      list(APPEND _march_flag_list "armv4t")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm922t")
      list(APPEND _mtune_flag_list "arm922t")
      list(APPEND _march_flag_list "armv4t")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm940t")
      list(APPEND _mtune_flag_list "arm940t")
      list(APPEND _march_flag_list "armv4t")

    elseif(TARGET_ARCHITECTURE STREQUAL "arm1020t")
      list(APPEND _mtune_flag_list "arm1020t")
      list(APPEND _march_flag_list "armv5t")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm10tdmi")
      list(APPEND _mtune_flag_list "arm10tdmi")
      list(APPEND _march_flag_list "armv5t")

    elseif(TARGET_ARCHITECTURE STREQUAL "arm9e")
      list(APPEND _mtune_flag_list "arm9e")
      list(APPEND _march_flag_list "armv5te")
      list(APPEND _available_extension_list "fp")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm946e-s")
      list(APPEND _mtune_flag_list "arm946e-s")
      list(APPEND _march_flag_list "armv5te")
      list(APPEND _available_extension_list "fp")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm966e-s")
      list(APPEND _mtune_flag_list "arm966e-s")
      list(APPEND _march_flag_list "armv5te")
      list(APPEND _available_extension_list "fp")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm968e-s")
      list(APPEND _mtune_flag_list "arm968e-s")
      list(APPEND _march_flag_list "armv5te")
      list(APPEND _available_extension_list "fp")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm10e")
      list(APPEND _mtune_flag_list "arm10e")
      list(APPEND _march_flag_list "armv5te")
      list(APPEND _available_extension_list "fp")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm1020e")
      list(APPEND _mtune_flag_list "arm1020e")
      list(APPEND _march_flag_list "armv5te")
      list(APPEND _available_extension_list "fp")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm1022e")
      list(APPEND _mtune_flag_list "arm1022e")
      list(APPEND _march_flag_list "armv5te")
      list(APPEND _available_extension_list "fp")
    elseif(TARGET_ARCHITECTURE STREQUAL "xscale")
      list(APPEND _mtune_flag_list "xscale")
      list(APPEND _march_flag_list "armv5te")
    elseif(TARGET_ARCHITECTURE STREQUAL "iwmmxt")
      list(APPEND _mtune_flag_list "iwmmxt")
      list(APPEND _march_flag_list "armv5te")
    elseif(TARGET_ARCHITECTURE STREQUAL "iwmmxt2")
      list(APPEND _mtune_flag_list "iwmmxt2")
      list(APPEND _march_flag_list "armv5te")
    elseif(TARGET_ARCHITECTURE STREQUAL "fa606te")
      list(APPEND _mtune_flag_list "fa606te")
      list(APPEND _march_flag_list "armv5te")
    elseif(TARGET_ARCHITECTURE STREQUAL "fa626te")
      list(APPEND _mtune_flag_list "fa626te")
      list(APPEND _march_flag_list "armv5te")
    elseif(TARGET_ARCHITECTURE STREQUAL "fmp626")
      list(APPEND _mtune_flag_list "fmp626")
      list(APPEND _march_flag_list "armv5te")
    elseif(TARGET_ARCHITECTURE STREQUAL "fa726te")
      list(APPEND _mtune_flag_list "fa726te")
      list(APPEND _march_flag_list "armv5te")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm926ej-s")
      list(APPEND _mtune_flag_list "arm926ej-s")
      list(APPEND _march_flag_list "armv5tej")
      list(APPEND _available_extension_list "fp")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm1026ej-s")
      list(APPEND _mtune_flag_list "arm1026ej-s")
      list(APPEND _march_flag_list "armv5tej")
      list(APPEND _available_extension_list "fp")

    elseif(TARGET_ARCHITECTURE STREQUAL "mpcore")
      list(APPEND _mtune_flag_list "mpcore")
      list(APPEND _march_flag_list "armv6k")
      list(APPEND _available_extension_list "fp")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm1136j-s")
      list(APPEND _mtune_flag_list "arm1136j-s")
      list(APPEND _march_flag_list "armv6j")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm1136jf-s")
      list(APPEND _mtune_flag_list "arm1136jf-s")
      list(APPEND _march_flag_list "armv6j")
      list(APPEND _available_extension_list "fp")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm1156t2-s")
      list(APPEND _mtune_flag_list "arm1156t2-s")
      list(APPEND _march_flag_list "armv6t2")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm1156t2f-s")
      list(APPEND _mtune_flag_list "arm1156t2f-s")
      list(APPEND _march_flag_list "armv6t2")
      list(APPEND _available_extension_list "fp")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm1176jz-s")
      list(APPEND _mtune_flag_list "arm1176jz-s")
      list(APPEND _march_flag_list "armv6kz")
    elseif(TARGET_ARCHITECTURE STREQUAL "arm1176jzf-s")
      list(APPEND _mtune_flag_list "arm1176jzf-s")
      list(APPEND _march_flag_list "armv6kz")
      list(APPEND _available_extension_list "fp")

    elseif(TARGET_ARCHITECTURE STREQUAL "generic-armv7-a")
      list(APPEND _mtune_flag_list "generic-armv7-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "mp" "sec" "vfpv3-d16" "vfpv3" "vfpv3-d16-fp16" "vfpv3-fp16" "vfpv4-d16" "vfpv4" "simd" "neon-fp16" "neon-vfpv4")

    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a78")
      list(APPEND _mtune_flag_list "cortex-a78")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "fp16" "dotprod")

    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a5")
      list(APPEND _mtune_flag_list "cortex-a5")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "mp" "sec" "neon-fp16")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a7")
      list(APPEND _mtune_flag_list "cortex-a7")
      list(APPEND _march_flag_list "armv7ve")
      list(APPEND _available_extension_list "simd")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a8")
      list(APPEND _mtune_flag_list "cortex-a8")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "sec" "simd")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a9")
      list(APPEND _mtune_flag_list "cortex-a9")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "mp" "sec" "neon-fp16")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a12")
      list(APPEND _mtune_flag_list "cortex-a12")
      list(APPEND _march_flag_list "armv7ve")
      list(APPEND _available_extension_list "simd")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a15")
      list(APPEND _mtune_flag_list "cortex-a15")
      list(APPEND _march_flag_list "armv7ve")
      list(APPEND _available_extension_list "simd")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a15.cortex-a7")
      list(APPEND _mtune_flag_list "cortex-a15.cortex-a7")
      list(APPEND _march_flag_list "armv7ve")
      list(APPEND _available_extension_list "simd")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a17")
      list(APPEND _mtune_flag_list "cortex-a17")
      list(APPEND _march_flag_list "armv7ve")
      list(APPEND _available_extension_list "simd")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a17.cortex-a7")
      list(APPEND _mtune_flag_list "cortex-a17.cortex-a7")
      list(APPEND _march_flag_list "armv7ve")
      list(APPEND _available_extension_list "simd")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a32")
      list(APPEND _mtune_flag_list "cortex-a32")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "crc" "simd")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a34")
      list(APPEND _mtune_flag_list "cortex-a34")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "crc" "crypto" "simd")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a35")
      list(APPEND _mtune_flag_list "cortex-a35")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "crc" "crypto" "simd")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a53")
      list(APPEND _mtune_flag_list "cortex-a53")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "crc" "crypto" "simd")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a55")
      list(APPEND _mtune_flag_list "cortex-a55")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "fp16" "dotprod")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a57")
      list(APPEND _mtune_flag_list "cortex-a57")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "crc" "simd")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a57.cortext-a53")
      list(APPEND _mtune_flag_list "cortex-a57.cortext-a53")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "crc" "simd")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a72")
      list(APPEND _mtune_flag_list "cortex-a72")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "crc" "crypto" "simd")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a72.cortext-a53")
      list(APPEND _mtune_flag_list "cortex-a72.cortext-a53")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "crc" "simd")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a73")
      list(APPEND _mtune_flag_list "cortex-a73")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "crc" "crypto" "simd")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a73.cortext-a35")
      list(APPEND _mtune_flag_list "cortex-a73.cortext-a35")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "crc" "simd")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a73.cortext-a53")
      list(APPEND _mtune_flag_list "cortex-a73.cortext-a53")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "crc" "simd")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a75")
      list(APPEND _mtune_flag_list "cortex-a75")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "fp16" "dotprod")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a75.cortext-a55")
      list(APPEND _mtune_flag_list "cortex-a75.cortext-a55")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _available_extension_list "fp16" "dotprod")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a76")
      list(APPEND _mtune_flag_list "cortex-a76")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "fp16" "dotprod")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a76.cortext-a55")
      list(APPEND _mtune_flag_list "cortex-a76.cortext-a55")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "fp16" "dotprod")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a76ae")
      list(APPEND _mtune_flag_list "cortex-a76ae")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "fp16" "dotprod")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a77")
      list(APPEND _mtune_flag_list "cortex-a77")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "fp16" "dotprod")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a78")
      list(APPEND _mtune_flag_list "cortex-a78")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "fp16" "dotprod")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a78ae")
      list(APPEND _mtune_flag_list "cortex-a78ae")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "fp16" "dotprod")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a78c")
      list(APPEND _mtune_flag_list "cortex-a78c")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "fp16" "dotprod")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a710")
      list(APPEND _mtune_flag_list "cortex-a510")
      list(APPEND _march_flag_list "armv9-a")
      list(APPEND _march_flag_list "armv8.6-a")
      list(APPEND _march_flag_list "armv8.5-a")
      list(APPEND _march_flag_list "armv8.4-a")
      list(APPEND _march_flag_list "armv8.3-a")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "bf16" "fp16" "i8mm")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a710")
      list(APPEND _mtune_flag_list "cortex-a710")
      list(APPEND _march_flag_list "armv9-a")
      list(APPEND _march_flag_list "armv8.6-a")
      list(APPEND _march_flag_list "armv8.5-a")
      list(APPEND _march_flag_list "armv8.4-a")
      list(APPEND _march_flag_list "armv8.3-a")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "bf16" "fp16" "i8mm")

    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-m0")
      list(APPEND _mtune_flag_list "cortex-m0")
      list(APPEND _march_flag_list "armv6s-m")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-m0plus")
      list(APPEND _mtune_flag_list "cortex-m0plus")
      list(APPEND _march_flag_list "armv6s-m")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-m1")
      list(APPEND _mtune_flag_list "cortex-m1")
      list(APPEND _march_flag_list "armv6s-m")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-m3")
      list(APPEND _mtune_flag_list "cortex-m3")
      list(APPEND _march_flag_list "armv7-m")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-m4")
      list(APPEND _mtune_flag_list "cortex-m4")
      list(APPEND _march_flag_list "armv7e-m")
      list(APPEND _available_extension_list "fp")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-m7")
      list(APPEND _mtune_flag_list "cortex-m7")
      list(APPEND _march_flag_list "armv7e-m")
      list(APPEND _available_extension_list "fp.dp")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-m23")
      list(APPEND _mtune_flag_list "cortex-m23")
      list(APPEND _march_flag_list "armv8-m.base")
      list(APPEND _march_flag_list "armv7-m")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-m33")
      list(APPEND _mtune_flag_list "cortex-m33")
      list(APPEND _march_flag_list "armv8-m.main")
      list(APPEND _march_flag_list "armv7-m")
      list(APPEND _available_extension_list "dsp" "fp")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-m35p")
      list(APPEND _mtune_flag_list "cortex-m35p")
      list(APPEND _march_flag_list "armv8-m.main")
      list(APPEND _march_flag_list "armv7-m")
      list(APPEND _available_extension_list "dsp" "fp")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-m55")
      list(APPEND _mtune_flag_list "cortex-m55")
      list(APPEND _march_flag_list "armv8.1-m.main")
      list(APPEND _march_flag_list "armv8-m")
      list(APPEND _march_flag_list "armv7-m")
      list(APPEND _available_extension_list "mve.fp" "fp.dp")

    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-r4")
      list(APPEND _mtune_flag_list "cortex-r4")
      list(APPEND _march_flag_list "armv7-r")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-r4f")
      list(APPEND _mtune_flag_list "cortex-r4f")
      list(APPEND _march_flag_list "armv7-r")
      list(APPEND _available_extension_list "fp")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-r5")
      list(APPEND _mtune_flag_list "cortex-r5")
      list(APPEND _march_flag_list "armv7-r")
      list(APPEND _available_extension_list "idiv" "fp")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-r7")
      list(APPEND _mtune_flag_list "cortex-r7")
      list(APPEND _march_flag_list "armv7-r")
      list(APPEND _available_extension_list "idiv" "vfpv3-d16-fp16")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-r8")
      list(APPEND _mtune_flag_list "cortex-r8")
      list(APPEND _march_flag_list "armv7-r")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-r52")
      list(APPEND _mtune_flag_list "cortex-r52")
      list(APPEND _march_flag_list "armv8-r")
      list(APPEND _march_flag_list "armv7-r")
      list(APPEND _available_extension_list "crc" "simd" "idiv" "vfpv3-d16-fp16")

    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-x1")
      list(APPEND _mtune_flag_list "cortex-x1")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "fp16" "dotprod")
    elseif(TARGET_ARCHITECTURE STREQUAL "cortex-x2")
      list(APPEND _march_flag_list "armv9-a")
      list(APPEND _march_flag_list "armv8.6-a")
      list(APPEND _march_flag_list "armv8.5-a")
      list(APPEND _march_flag_list "armv8.4-a")
      list(APPEND _march_flag_list "armv8.3-a")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "bf16" "fp16" "i8mm")

    elseif(TARGET_ARCHITECTURE STREQUAL "neoverse-e1")
      list(APPEND _mtune_flag_list "neoverse-e1")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "fp16" "dotprod")
    elseif(TARGET_ARCHITECTURE STREQUAL "neoverse-n1")
      list(APPEND _mtune_flag_list "neoverse-n1")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "fp16" "dotprod")
    elseif(TARGET_ARCHITECTURE STREQUAL "neoverse-n2")
      list(APPEND _mtune_flag_list "neoverse-n2")
      list(APPEND _march_flag_list "armv8.5-a")
      list(APPEND _march_flag_list "armv8.4-a")
      list(APPEND _march_flag_list "armv8.3-a")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "bf16" "fp16" "i8mm")
    elseif(TARGET_ARCHITECTURE STREQUAL "neoverse-v1")
      list(APPEND _mtune_flag_list "neoverse-v1")
      list(APPEND _march_flag_list "armv8.4-a")
      list(APPEND _march_flag_list "armv8.3-a")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "bf16" "fp16" "i8mm")

      # Broadcom
    elseif(TARGET_ARCHITECTURE STREQUAL "brahma-b15")
      list(APPEND _mtune_flag_list "brahma-b15")
    elseif(TARGET_ARCHITECTURE STREQUAL "brahma-b53")
      list(APPEND _mtune_flag_list "brahma-b53")
    elseif(TARGET_ARCHITECTURE STREQUAL "thunderx2")
      list(APPEND _mtune_flag_list "thunderx2")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "crypto")

      # Cavium
    elseif(TARGET_ARCHITECTURE STREQUAL "thunderx")
      list(APPEND _mtune_flag_list "thunderx")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "crc" "crypto")
    elseif(TARGET_ARCHITECTURE STREQUAL "thunderxt88")
      list(APPEND _mtune_flag_list "thunderxt88")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "crc" "crypto")
    elseif(TARGET_ARCHITECTURE STREQUAL "thunderxt81")
      list(APPEND _mtune_flag_list "thunderxt81")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "crc" "crypto")
    elseif(TARGET_ARCHITECTURE STREQUAL "thunderxt83")
      list(APPEND _mtune_flag_list "thunderxt83")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "crc" "crypto")
    elseif(TARGET_ARCHITECTURE STREQUAL "thunderx2t99")
      list(APPEND _mtune_flag_list "thunderx2t99")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "fp" "asimd" "evtstrm" "aes" "pmull" "sha1" "sha2" "crc32" "atomics" "cpuid" "asimdrdm")

      # DEC
    elseif(TARGET_ARCHITECTURE STREQUAL "strongarm110")
      list(APPEND _mtune_flag_list "strongarm110")
      list(APPEND _march_flag_list "armv4")
    elseif(TARGET_ARCHITECTURE STREQUAL "strongarm1100")
      list(APPEND _mtune_flag_list "strongarm1100")
      list(APPEND _march_flag_list "armv4")

      # FUJITSU
    elseif(TARGET_ARCHITECTURE STREQUAL "a64fx")
      list(APPEND _mtune_flag_list "a64fx")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "fp" "asimd" "evtstrm" "sha1" "sha2" "crc32" "atomics" "fphp" "asimdhp" "cpuid" "asimdrdm" "fcma" "dcpop" "sve")

      # HiSilicon
    elseif(TARGET_ARCHITECTURE STREQUAL "tsv110")
      list(APPEND _mtune_flag_list "tsv110")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "aes" "crypto" "fp16" "sha2")

      # Nvidia
    elseif(TARGET_ARCHITECTURE STREQUAL "denver")
      list(APPEND _mtune_flag_list "denver")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "crc" "crypto" "simd" "vfpv3" "vfpv4")
    elseif(TARGET_ARCHITECTURE STREQUAL "denver2")
      list(APPEND _mtune_flag_list "denver2")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "crc" "crypto" "simd" "vfpv3" "vfpv4")
    elseif(TARGET_ARCHITECTURE STREQUAL "carmel")
      list(APPEND _mtune_flag_list "denver")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "crc" "crypto" "simd" "vfpv3" "vfpv4")

      # APM
    elseif(TARGET_ARCHITECTURE STREQUAL "xgene1")
      list(APPEND _mtune_flag_list "xgene1")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")

      # Qualcomm
    elseif(TARGET_ARCHITECTURE STREQUAL "scorpion")
      list(APPEND _mtune_flag_list "scorpion")
      list(APPEND _march_flag_list "armv7-a")
    elseif(TARGET_ARCHITECTURE STREQUAL "krait")
      list(APPEND _mtune_flag_list "krait")
      list(APPEND _march_flag_list "armv7-a")
    elseif(TARGET_ARCHITECTURE STREQUAL "kryo")
      list(APPEND _mtune_flag_list "kryo")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
    elseif(TARGET_ARCHITECTURE STREQUAL "kryo2")
      list(APPEND _mtune_flag_list "kryo2")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
    elseif(TARGET_ARCHITECTURE STREQUAL "falkor")
      list(APPEND _mtune_flag_list "falkor")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
    elseif(TARGET_ARCHITECTURE STREQUAL "saphira")
      list(APPEND _mtune_flag_list "saphira")
      list(APPEND _march_flag_list "armv8.4-a")
      list(APPEND _march_flag_list "armv8.3-a")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "crc" "crypto" "simd" "vfpv3" "vfpv4")

      # Samsung
    elseif(TARGET_ARCHITECTURE STREQUAL "exynos-m1")
      list(APPEND _mtune_flag_list "exynos-m1")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "crypto" "simd")

      # Marvell
    elseif(TARGET_ARCHITECTURE STREQUAL "marvell-f")
      list(APPEND _mtune_flag_list "marvell-f")
      list(APPEND _march_flag_list "armv5te")
    elseif(TARGET_ARCHITECTURE STREQUAL "marvell-pj4")
      list(APPEND _mtune_flag_list "marvell-pj4")
      list(APPEND _march_flag_list "armv7-a")
      list(APPEND _available_extension_list "mp" "sec" "fp")

      # Intel
    elseif(TARGET_ARCHITECTURE STREQUAL "i80200")
      list(APPEND _mtune_flag_list "i80200")
    elseif(TARGET_ARCHITECTURE STREQUAL "pxa250a")
      list(APPEND _mtune_flag_list "pxa250a")
    elseif(TARGET_ARCHITECTURE STREQUAL "pxa210a")
      list(APPEND _mtune_flag_list "pxa210a")
    elseif(TARGET_ARCHITECTURE STREQUAL "i80321-400")
      list(APPEND _mtune_flag_list "i80321-400")
    elseif(TARGET_ARCHITECTURE STREQUAL "i80321-600")
      list(APPEND _mtune_flag_list "i80321-600")
    elseif(TARGET_ARCHITECTURE STREQUAL "pxa250b")
      list(APPEND _mtune_flag_list "pxa250b")
    elseif(TARGET_ARCHITECTURE STREQUAL "pxa210b")
      list(APPEND _mtune_flag_list "pxa210b")
    elseif(TARGET_ARCHITECTURE STREQUAL "i80321-400-b0")
      list(APPEND _mtune_flag_list "i80321-400-b0")
    elseif(TARGET_ARCHITECTURE STREQUAL "i80321-600-b0")
      list(APPEND _mtune_flag_list "i80321-600-b0")
    elseif(TARGET_ARCHITECTURE STREQUAL "pxa250c")
      list(APPEND _mtune_flag_list "pxa250c")
    elseif(TARGET_ARCHITECTURE STREQUAL "pxa210c")
      list(APPEND _mtune_flag_list "pxa210c")
    elseif(TARGET_ARCHITECTURE STREQUAL "pxa27x")
      list(APPEND _mtune_flag_list "pxa27x")
    elseif(TARGET_ARCHITECTURE STREQUAL "ipx425-533")
      list(APPEND _mtune_flag_list "ipx425-533")
    elseif(TARGET_ARCHITECTURE STREQUAL "ipx425-400")
      list(APPEND _mtune_flag_list "ipx425-400")
    elseif(TARGET_ARCHITECTURE STREQUAL "ipx425-266")
      list(APPEND _mtune_flag_list "ipx425-266")
    elseif(TARGET_ARCHITECTURE STREQUAL "pxa32x")
      list(APPEND _mtune_flag_list "pxa32x")
    elseif(TARGET_ARCHITECTURE STREQUAL "pxa930")
      list(APPEND _mtune_flag_list "pxa930")
    elseif(TARGET_ARCHITECTURE STREQUAL "pxa30x")
      list(APPEND _mtune_flag_list "pxa30x")
    elseif(TARGET_ARCHITECTURE STREQUAL "pxa31x")
      list(APPEND _mtune_flag_list "pxa31x")
    elseif(TARGET_ARCHITECTURE STREQUAL "sa1110")
      list(APPEND _mtune_flag_list "sa1110")
    elseif(TARGET_ARCHITECTURE STREQUAL "ipx1200")
      list(APPEND _mtune_flag_list "ipx1200")

      # Apple
    elseif(TARGET_ARCHITECTURE STREQUAL "apple-a6")
      list(APPEND _mtune_flag_list "apple-a6")
      list(APPEND _march_flag_list "armv7-a")
    elseif(TARGET_ARCHITECTURE STREQUAL "apple-a7")
      list(APPEND _mtune_flag_list "apple-a7")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _available_extension_list "aes" "crypto" "fp" "simd" "sha2" "zcm" "zcz")
    elseif(TARGET_ARCHITECTURE STREQUAL "apple-a8")
      list(APPEND _mtune_flag_list "apple-a8")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _available_extension_list "aes" "crypto" "fp" "simd" "sha2" "zcm" "zcz")
    elseif(TARGET_ARCHITECTURE STREQUAL "apple-a9")
      list(APPEND _mtune_flag_list "apple-a9")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _available_extension_list "aes" "crypto" "fp" "simd" "sha2" "zcm" "zcz")
    elseif(TARGET_ARCHITECTURE STREQUAL "apple-a10")
      list(APPEND _mtune_flag_list "apple-a10")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _available_extension_list "aes" "crc" "crypto" "fp" "simd" "rdm" "sha2" "zcm" "zcz")
    elseif(TARGET_ARCHITECTURE STREQUAL "apple-a11")
      list(APPEND _mtune_flag_list "apple-a11")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _available_extension_list "aes" "crc" "crypto" "fp" "lse" "simd" "ras" "rdm" "sha2" "zcm" "zcz")
    elseif(TARGET_ARCHITECTURE STREQUAL "apple-a12")
      list(APPEND _mtune_flag_list "apple-a12")
      list(APPEND _march_flag_list "armv8.3-a")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _available_extension_list "aes" "crc" "crypto" "fp" "fp16" "lse" "simd" "ras" "rcpc" "rdm" "sha2" "zcm" "zcz")
    elseif(TARGET_ARCHITECTURE STREQUAL "apple-a13")
      list(APPEND _mtune_flag_list "apple-a13")
      list(APPEND _march_flag_list "armv8.4-a")
      list(APPEND _march_flag_list "armv8.3-a")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _available_extension_list "aes" "crc" "crypto" "dotprod" "fp" "fp16" "fp16fml" "lse" "simd" "ras" "rcpc" "rdm" "sha2" "sha3" "sm4" "zcm" "zcz")
    elseif(TARGET_ARCHITECTURE STREQUAL "apple-a14")
      list(APPEND _mtune_flag_list "apple-a14")
      list(APPEND _march_flag_list "armv8.5-a")
      list(APPEND _march_flag_list "armv8.4-a")
      list(APPEND _march_flag_list "armv8.3-a")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _available_extension_list "aes" "crc" "crypto" "fp" "fp16" "lse" "simd" "ras" "rcpc" "rdm" "sha2" "zcm" "zcz")
    elseif(TARGET_ARCHITECTURE STREQUAL "apple-m1")
      list(APPEND _mtune_flag_list "apple-m1" "vortext")
      list(APPEND _march_flag_list "armv8.5-a")
      list(APPEND _march_flag_list "armv8.4-a")
      list(APPEND _march_flag_list "armv8.3-a")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _available_extension_list "aes" "crc" "crypto" "fp" "fp16" "lse" "simd" "ras" "rcpc" "rdm" "sha2" "zcm" "zcz")
    elseif(TARGET_ARCHITECTURE STREQUAL "apple-a15")
      list(APPEND _mtune_flag_list "apple-a15")
      list(APPEND _march_flag_list "armv8.5-a")
      list(APPEND _march_flag_list "armv8.4-a")
      list(APPEND _march_flag_list "armv8.3-a")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _available_extension_list "aes" "crc" "crypto" "fp" "fp16" "lse" "simd" "ras" "rcpc" "rdm" "sha2" "zcm" "zcz")
    elseif(TARGET_ARCHITECTURE STREQUAL "apple-m2")
      list(APPEND _mtune_flag_list "apple-m2" "apple-m1" "vortex")
      list(APPEND _march_flag_list "armv8.5-a")
      list(APPEND _march_flag_list "armv8.4-a")
      list(APPEND _march_flag_list "armv8.3-a")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _available_extension_list "aes" "crc" "crypto" "fp" "fp16" "lse" "simd" "ras" "rcpc" "rdm" "sha2" "zcm" "zcz")
    elseif(TARGET_ARCHITECTURE STREQUAL "apple-a16")
      list(APPEND _mtune_flag_list "apple-a16")
      list(APPEND _march_flag_list "armv8.5-a")
      list(APPEND _march_flag_list "armv8.4-a")
      list(APPEND _march_flag_list "armv8.3-a")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _available_extension_list "aes" "crc" "crypto" "fp" "fp16" "lse" "simd" "ras" "rcpc" "rdm" "sha2" "zcm" "zcz")
    elseif(TARGET_ARCHITECTURE STREQUAL "apple-m3")
      list(APPEND _mtune_flag_list "apple-m3" "apple-m2" "apple-m1" "vortex")
      list(APPEND _march_flag_list "armv8.5-a")
      list(APPEND _march_flag_list "armv8.4-a")
      list(APPEND _march_flag_list "armv8.3-a")
      list(APPEND _march_flag_list "armv8.2-a")
      list(APPEND _march_flag_list "armv8.1-a")
      list(APPEND _march_flag_list "armv8-a")
      list(APPEND _available_extension_list "aes" "crc" "crypto" "fp" "fp16" "lse" "simd" "ras" "rcpc" "rdm" "sha2" "zcm" "zcz")

      # Others
    elseif(TARGET_ARCHITECTURE STREQUAL "generic")
      list(APPEND _march_flag_list "generic")
    elseif(TARGET_ARCHITECTURE STREQUAL "none")
      # add this clause to remove it from the else clause

    else()
      message(FATAL_ERROR "[OFA] Unknown target architecture: \"${TARGET_ARCHITECTURE}\". Please set TARGET_ARCHITECTURE to a supported value.")
    endif()

    # Clean list of available extensions
    list(SORT _available_extension_list)
    list(REMOVE_DUPLICATES _available_extension_list)

    if(OFA_VERBOSE)
      if(_march_flag_list)
        string(REPLACE ";"  ", " _str "${_march_flag_list}")
        string(TOUPPER ${_str} _str)
        message(STATUS "[OFA] CPU architectures (-march): " ${_str})
      endif()
      if(_mtune_flag_list)
        string(REPLACE ";"  ", " _str "${_mtune_flag_list}")
        string(TOUPPER ${_str} _str)
        message(STATUS "[OFA] CPU microarchitectures (-mtune): " ${_str})
      endif()
      if(_available_extension_list)
        list(LENGTH _available_extension_list _len)
        string(REPLACE ";"  ", " _str "${_available_extension_list}")
        string(TOUPPER ${_str} _str)
        message(STATUS "[OFA] Extensions (${_len} available): ${_str}")
      endif()
    endif()

    # Following the recommendation from
    # https://community.arm.com/developer/tools-software/
    # tools/b/tools-software-ides-blog/posts/
    # compiler-flags-across-architectures-march-mtune-and-mcpu we
    # first try to use the -mcpu flag and set it a value from the
    # list of -mtune flags. If that fails, e.g., if the compiler
    # does not yet support the specified target, we try to set the
    # -march and -mtune flags as fallback option.

    # Set compiler-specific option names
    set(_mcpu_flag "-mcpu=")
    set(_march_flag "-march=")
    set(_mtune_flag "-mtune")
    
    foreach(_flag ${_mtune_flag_list})
      AddCXXCompilerFlag("${_mcpu_flag}${_flag}" FLAGS ARCHITECTURE_CXX_FLAGS RESULT _ok)
      if(_ok)
        break()
      endif()
    endforeach()
    
    if(NOT _ok)
      # Fallback: set -march and -mtune flags
      set(_check_extension_list)
      set(_check_extension_flag_list)
      set(_disable_extension_flag_list)
      set(_enable_extension_flag_list)
      set(_ignore_extension_flag_list)

      foreach(_flag ${_march_flag_list})
        AddCXXCompilerFlag("${_march_flag}${_flag}" RESULT _ok)
        if(_ok)
          set(_march ${_flag})
          break()
        endif()
      endforeach()

      # Step 2: Enable/disable feature flags based on available CPU
      #         features, used-defined USE_<feature> variables and
      #         the capabilities of the host system's compiler and linker
      file(READ ${CMAKE_MODULE_PATH}/ofa/ChecksArm.txt _checks)
      string(REGEX REPLACE "[:;]" "|" _checks "${_checks}")
      string(REPLACE "\n" ";" _checks "${_checks}")

      set(_skip_check FALSE)

      # Iterate over the list of checks line by line
      foreach (_check ${_checks})
        string(REPLACE "|" ";" _check "${_check}")

        # Parse for special lines
        if ("${_check}" MATCHES "^#" ) # Skip comment
          continue()

        elseif ("${_check}" MATCHES "^push_enable" ) # Start enable block
          list(GET _check 1 _push_enable_list)
          string(REPLACE "," ";" _push_enable_list "${_push_enable_list}")
          _ofa_find(_push_enable_list "${CMAKE_CXX_COMPILER_ID}" _found)
          if(_found)
            list(INSERT _skip_check 0 FALSE)
          else()
            list(INSERT _skip_check 0 TRUE)
          endif()
          continue()

        elseif ("${_check}" MATCHES "^pop_enable" ) # End enable block
          list(REMOVE_AT _skip_check 0)
          continue()

        elseif ("${_check}" MATCHES "^push_disable" ) # Start disable block
          list(GET _check 1 _push_disable_list)
          string(REPLACE "," ";" _push_disable_list "${_push_disable_list}")
          _ofa_find(_push_disable_list "${CMAKE_CXX_COMPILER_ID}" _found)
          if(_found)
            list(INSERT _skip_check 0 TRUE)
          else()
            # Compiler was not found in the list, so we keep its previous status
            list(GET _skip_check 0 _skip)
            list(INSERT _skip_check 0 ${_skip})
          endif()
          continue()

        elseif ("${_check}" MATCHES "^pop_disable" ) # End disable block
          list(REMOVE_AT _skip_check 0)
          continue()
        endif()

        # Skip test?
        list(GET _skip_check 0 _skip)
        if(_skip)
          continue()
        endif()

        # Extract extra CPU extensions, header files, function name, and parameters
        list(GET _check 0 _check_extension_flags)
        list(GET _check 1 _check_headers)
        list(GET _check 2 _check_function)
        list(GET _check 3 _check_params)
        
        # Convert list of extensions into compiler flags
        string(REPLACE "," ";" _check_extension_flags "${_check_extension_flags}")
        list(GET _check_extension_flags 0 _extension_flag)
        list(APPEND _check_extension_flag_list "${_extension_flag}")
        string(REPLACE ";" "+" _check_extra_flags "+${_check_extension_flags}")

        # Extract optional extension alias
        list(LENGTH _check _len)
        if(${_len} EQUAL 5)
          list(GET _check 4 _extension)
        else()
          set(_extension "${_extension_flag}")
        endif()

        list(APPEND _check_extension_list "${_extension}")

        # Define USE_<_extension_flag> variable
        set(_useVar "USE_${_extension_flag}")
        string(TOUPPER "${_useVar}" _useVar)
        string(REPLACE "[-.+/:= ]" "_" _useVar "${_useVar}")

        # If not specified externally, set the value of the
        # USE_<_extension_flag> variable to TRUE if it is found in the list
        # of available extensions and FALSE otherwise
        if(NOT DEFINED ${_useVar})
          _ofa_find(_available_extension_list "${_extension}" _found)
          set(${_useVar} ${_found})
        endif()

        if(${_useVar})
          # Check if the compiler supports the -march=<_march>+<_extension_flag>
          # flag and can compile the provided test code with it
          set(_code "\nint main() { ${_check_function}(${_check_params})\; return 0\; }")
          AddCXXCompilerFlag("${_march_flag}${_march}+${_extension_flag}"
            EXTRA_FLAGS ${_check_extra_flags}
            HEADERS     ${_check_headers}
            CODE        "${_code}"
            RESULT      _ok)
          if(NOT ${_ok})
            # Test failed
            set(${_useVar} FALSE CACHE BOOL "Use ${_extension} extension.")
          else()
            # Test succeeded
            set(${_useVar} TRUE CACHE BOOL "Use ${_extension} extension.")
          endif()
        else()
          # Disable extension without running tests
          set(${_useVar} FALSE CACHE BOOL "Use ${_extension} extension.")
        endif()
        mark_as_advanced(${_useVar})
      endforeach()

      # Generate lists of enabled/disabled flags
      list(REMOVE_DUPLICATES _check_extension_flag_list)
      foreach(_extension_flag ${_check_extension_flag_list})
        _ofa_find(_available_extension_list "${_extension_flag}" _found)
        set(_useVar "USE_${_extension_flag}")
        string(TOUPPER "${_useVar}" _useVar)
        string(REPLACE "[-.+/:= ]" "_" _useVar "${_useVar}")

        if(${_useVar})
          # Add <_extension_flag> to list of enabled extensions (if supported)
          set(_haveVar "HAVE_${_march_flag}${_march}+${_extension_flag}")
          string(REGEX REPLACE "[-.+/:= ]" "_" _haveVar "${_haveVar}")
          if(NOT ${_haveVar})
            if(OFA_VERBOSE)
              message(STATUS "[OFA] Ignoring flag ${_march_flag}${_march}+${_extension_flag} because checks failed")
            endif()
            list(APPEND _ignore_extension_flag_list "${_extension_flag}")
            continue()
          endif()
          list(APPEND _enable_extension_flag_list "${_extension_flag}")
        else()
          # Add <_extension_flag> to list of disabled extensions (if supported)
          AddCXXCompilerFlag("${_march_flag}${_march}+no${_extension_flag}")
          set(_haveVar "HAVE_${_march_flag}${_march}+no${_extension_flag}")
          string(REGEX REPLACE "[-.+/:= ]" "_" _haveVar "${_haveVar}")
          if(NOT ${_haveVar})
            if(OFA_VERBOSE)
              message(STATUS "[OFA] Ignoring flag ${_march_flag}${_march}+no${_extension_flag} because checks failed")
            endif()
            list(APPEND _ignore_extension_flag_list "${_extension_flag}")
            continue()
          endif()
          list(APPEND _disable_extension_flag_list "${_extension_flag}")
        endif()
      endforeach()

      if(OFA_VERBOSE)
        # Print checked extension flags
        if(_check_extension_flag_list)
          list(LENGTH _check_extension_flag_list _len)
          list(SORT _check_extension_flag_list)
          string(REPLACE ";"  ", " _str "${_check_extension_flag_list}")
          string(TOUPPER ${_str} _str)
          message(STATUS "[OFA] Extensions (${_len} checked): ${_str}")
        endif()
        # Print enabled extension flags
        if(_enable_extension_flag_list)
          list(LENGTH _enable_extension_flag_list _len)
          list(SORT _enable_extension_flag_list)
          string(REPLACE ";"  ", " _str "${_enable_extension_flag_list}")
          string(TOUPPER ${_str} _str)
          message(STATUS "[OFA] Extensions (${_len} enabled): ${_str}")
        endif()
        # Print disabled extension flags
        if(_disable_extension_flag_list)
          list(LENGTH _disable_extension_flag_list _len)
          list(SORT _disable_extension_flag_list)
          string(REPLACE ";"  ", " _str "${_disable_extension_flag_list}")
          string(TOUPPER ${_str} _str)
          message(STATUS "[OFA] Extensions (${_len} disabled): ${_str}")
        endif()
        # Print ignored extension flags
        if(_ignore_extension_flag_list)
          list(LENGTH _ignore_extension_flag_list _len)
          list(SORT _ignore_extension_flag_list)
          string(REPLACE ";"  ", " _str "${_ignore_extension_flag_list}")
          string(TOUPPER ${_str} _str)
          message(STATUS "[OFA] Extensions (${_len} ignored): ${_str}")
        endif()
        # Print unhandled extension flags
        set(_unhandled_extension_list)
        foreach(_extension ${_available_extension_list})
          _ofa_find(_check_extension_list "${_extension}" _found)
          if(NOT _found)
            list(APPEND _unhandled_extension_list ${_extension})
          endif()
        endforeach()
        if(_unhandled_extension_list)
          list(LENGTH _unhandled_extension_list _len)
          list(SORT _unhandled_extension_list)
          string(REPLACE ";"  ", " _str "${_unhandled_extension_list}")
          string(TOUPPER ${_str} _str)
          message(STATUS "[OFA] Extensions (${_len} unhandled): ${_str}")
        endif()
      endif()

      # Step 3: Set compiler-specific flags (e.g., -m<feature>/-mno-<feature>)
      if(MSVC AND MSVC_VERSION GREATER 1900)
        _ofa_find(_enable_extension_flag_list "vfpv4" _found)
        if(_found)
          AddCompilerFlag("/arch:VFPv4" CXX_FLAGS ARCHITECTURE_CXX_FLAGS CXX_RESULT _found)
        endif()
        if(NOT _found)
          _ofa_find(_enable_extension_flag_list "simd" _found)
          if(_found)
            AddCompilerFlag("/arch:ARMv7VE" CXX_FLAGS ARCHITECTURE_CXX_FLAGS CXX_RESULT _found)
          endif()
        endif()
        foreach(_flag ${_enable_extension_flag_list})
          string(TOUPPER "${_flag}" _flag)
          string(REPLACE "[-.+/:= ]" "_" _flag "__${_flag}__")
          add_definitions("-D${_flag}")
        endforeach(_flag)

      elseif(CMAKE_CXX_COMPILER_ID MATCHES "Cray")

        # TODO: Add Cray flags

      elseif(CMAKE_CXX_COMPILER_ID MATCHES "Fujitsu")

        # TODO: Add Fujitsu flags

      elseif(CMAKE_CXX_COMPILER_ID MATCHES "NVHPC")

        # TODO: Add NVHPC flags

      else()
        # Others: GNU, Clang and variants
        foreach(_march ${_march_flag_list})
          AddCXXCompilerFlag("-march=${_march}" RESULT _ok)
          if(_ok)
            set(_march_plus_extensions "${_march}")
            foreach(_flag ${_enable_extension_flag_list})
              AddCXXCompilerFlag("-march=${_march_plus_extensions}+${_flag}" RESULT _ok)
              if(_ok)
                set(_march_plus_extensions "${_march_plus_extensions}+${_flag}")
              endif(_ok)
            endforeach()
            foreach(_flag ${_disable_extension_flag_list})
              AddCXXCompilerFlag("-march=${_march_plus_extensions}+no${_flag}" RESULT _ok)
              if(_ok)
                set(_march_plus_extensions "${_march_plus_extensions}+no${_flag}")
              endif(_ok)
            endforeach()
            AddCXXCompilerFlag("-march=${_march_plus_extensions}" FLAGS ARCHITECTURE_CXX_FLAGS)
            break()
          endif()
        endforeach()

        # Set -mtune flag
        foreach(_mtune ${_mtune_flag_list})
          AddCXXCompilerFlag("-mtune=${_mtune}" FLAGS ARCHITECTURE_CXX_FLAGS RESULT _ok)
          if(_ok)
            break()
          endif()
        endforeach()
      endif()

    endif()
  endif()

  # Compile code with profiling instrumentation
  if(TARGET_PROFILER STREQUAL "gprof")
    AddCXXCompilerFlag("-pg" FLAGS ARCHITECTURE_CXX_FLAGS)
  endif()

  # Remove duplicate flags
  list(REMOVE_DUPLICATES ARCHITECTURE_CXX_FLAGS)
  
  if(OFA_VERBOSE)
    string(REPLACE ";"  ", " _str "${ARCHITECTURE_CXX_FLAGS}")
    message(STATUS "ARCHITECTURE_CXX_FLAGS: " ${_str})
  endif()
  
endmacro(OFA_HandleArmOptions)
