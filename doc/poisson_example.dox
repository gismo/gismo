namespace gismo {

/**

\page poisson_example poisson_example.cpp

The Poisson equation:
\f{eqnarray*}{
                    -\Delta\mathbf{u} &=& \mathbf{f} \quad \text{in} \quad \Omega,         \\
                           \mathbf{u} &=& \mathbf{g} \quad \text{on} \quad \Gamma_D,       \\
   \mathbf{n} \cdot \nabla \mathbf{u} &=& \mathbf{h} \quad \text{on} \quad \Gamma_N,
\f}
where \f$\mathbf{n}\f$ is the outward pointing unit normal vector, 
\f$\Gamma_D\f$ and \f$\Gamma_N\f$ are the parts of the boundary where Dirichlet (essential)
and Neumann (natural) boundary conditions are prescribed, respectively.

We can also create a own \c .cpp and solve more complicated Poisson problems. In this tutorial, we
explain how to do this. As an example we will use the \c poisson_example.cpp file in the
example folder. We will go through essentials of the code in details (For more detail of the solver
see the documentation for \ref gsPoissonAssembler, \ref gsAssembler, and \ref gsVisitorPoisson.)

First we include the library and use the gismo namespace.

\snippet poisson_example.cpp Include namespace

We add a command-line argument which allows the user to create a
Paraview visualization file.

\snippet poisson_example.cpp Parse command line

Our Poisson problem is defined by source (right-hand side) function and Dirichlet function data:

\snippet poisson_example.cpp Function data

\section TPGeometry Geometry

Inside the main function we declare the geometry. Note that we use
the \ref gsMultiPatch class even if we only have a single patch geometry. The \ref
gsNurbsCreator class creates several simple geometries:

\snippet poisson_example.cpp Geometry data

The chosen geometry represents the unit square consisting of 2 x 2
squares, which all have side-length 0.5, i.e., the computational
domain is the unit square \f$\Omega = (0,1)^2\f$ .

In this example, the four patches are numbered as follows:

<table border>
<tr><td>1</td><td>3</td></tr>
<tr><td>0</td><td>2</td></tr>
</table>

\section BCs Boundary Conditions

The boundary conditions are stored in an object of type \ref gsBoundaryConditions :

In the 2D case, each patch has 4 boundary sides: \a west, \a east, \a
south and \a north (in addition there is \a front and \a back for 3D
geometries). The boundary conditions must be specified for each
patch.

In this example we have 4 patches forming a unit square, hence
we need to specify 8 boundary conditions:

\snippet poisson_example.cpp Boundary conditions

Note that the first argument in the \c addCondition is the patch number. 

\section tp_dbasis Discretization Basis

We now need a discretization basis. We use the basis from the patches.
We can h or/and p refine this basis (in any order).

\snippet poisson_example.cpp Refinement

Here, we perform h- and k-refinement.

\section solver Setting up and using the Assembler

We use \ref gsPoissonAssembler class to assemble and the Poisson equation.
First we initialize the class object by giving the geometry (patches),
discretization basis, boundary condition, source function, and the strategies
for treating Dirichlet boundary conditions and patch interfaces:

\snippet poisson_example.cpp Assemble

With \c dirichlet::elimination, we specify that the degrees of freedom (DOF)
on the Dirichlet bondary should be eliminated already during the assembling
process.

By \c iFace::glue, we specify that the DOFs at interfaces should be "glued"
together in the sense that corresponding DOFs will be identified with each
other and treated as one global DOF (which results in \f$C^0\f$-continuity
at the interfaces).

Executing the assembling process is then done by calling
~~~~~
assembler.assemble();
~~~~~
The assembled system matrix and the right-hand-side can be accessed via
~~~~~
assembler.matrix();
assembler.rhs();
~~~~~
where the system matrix is stored as a \ref gsSparseMatrix and the
right-hand-side as \ref gsMatrix.

\section GetPostProcSolution Computing and Post processing the solution

Solving the linear system of equations is done in the main file. In
this example of the Poisson problem, where we have a symmetric and
positive definite system matrix, we can, for example, use the
CG-solver of the Eigen library, with a diagonal preconditioner.

\snippet poisson_example.cpp Solve

The \c solVector contains the computed coefficients \em without the
Dirichlet DOFs (which were eliminated). In order to obtain the
discrete solution as a \ref gsField, we call

\snippet poisson_example.cpp Construct solution

Finally we want to evaluate the (exact and approximate) solutions and
write to a file:

\snippet poisson_example.cpp Plot in Paraview

the solutions can now opened and viewed in paraview.

\section poisson_exampleAnnotated Annotated source file

Here is the full file \c examples/poisson_example.cpp. Clicking on a function
or class name will lead you to its reference documentation.

\include poisson_example.cpp

*/

}
