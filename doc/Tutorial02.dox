namespace gismo {
/**
\page Tutorial02 Tutorial 02: Geometry

In this tutorial you will get to know the main geometric objects and
operations available in the library.

\section bsp02 B-splines

The classes/naming convention regarding B-splines is as follows:

- gsBSplineBasis

  This class derives from gsBasis, representing a set of B-spline basis
  functions. These are polynomial functions, i.e. there are no weights
  (the weights if we regard them as NURBS are all equal to 1,
  therefore not stored). 
  The main ingredient for constructing a
  B-spline basis is a knot vector, see \ref knotVector_example

- gsBSpline 

  This class derives from gsCurve and consists of a gsBSplineBasis
  plus a matrix which represents the coefficients in the
  basis. Therefore, the matrix contains the control points of the
  B-spline curve.

- gsTensorBSplineBasis\<d\>

  The tensor-product basis of dimension d where the coordinates are
  gsBSplineBasis.
  
- gsTensorBSpline\<d\>

  A function defined by a gsTensorBSplineBasis plus a coefficient
  vector.  As before, the number \a d stands for the dimension. For
  d=2 we have a gsSurface, for d=3 we have a gsVolume and for d=4 a
  gsBulk.

Similarly, gsNurbsBasis, gsNurbs, gsTensorNurbsBasis and gsTensorNurbs
refer to Non-uniform rational B-spline bases patches (functions) of
dimension one, or more, respectively.

  Here is an example of how to create a knot
  vector and a B-spline basis, followed by uniform refinement.

  \include bspline_basis.cpp
  Output: \verbinclude bspline_basis.out

  And here is an example of how to compute the Greville
  abscissae, and evaluate the basis on them.

  \include bspline_greville.cpp
  Output: \verbinclude bspline_greville.out
  
These B-spline related classes are implemented in the \ref Nurbs.

Several basic operations are available: degree elevation, knot
insertion, uniform refinement, interpolation, and so on, see 
\ref bSplineBasis_example for a few of them.

Since all parametric curves, surfaces or volumes are geometric
objects, all these derive from gsGeometry, which in turn derives from
gsFunction.

We can obtain the control net of a geometry by

\snippet geometry_example.cpp control net

Finally, we can export tesselations (meshes) as files for
visualization in Paraview as follows:

\snippet geometry_example.cpp write to paraview


\subsection crgeo02 Creating simple geometries

- The class gsNurbsCreator has several functions that allow us to create
(compute) the B-spline basis and the control points of some standard
geometries.

- The \ref fitting_example shows how we can fit data points with B-splines.

\section multipatch02 Multi-patch

A gsMultiPatch object consists of a collection of patches with
topological information. The topology is given by the boundaries and the
adjacency graph, defining the connections between patches along
boundaries.

Here is an XML file defining a simple 2-patch rectangle (two_patches.xml):

\include filedata/planar/two_squares.xml

The file contains the patches plus information on the boundaries and
interfaces between them. A boundary is a side that does not meet with
another side.  An interface consists of two sides that meet plus
orientation information. The following illustration describes the
data:

\image html mp.png "Illustration of file two_patches.xml"

See also gismo::boundary and gismo::boundaryInterface for more
information on the meaning of the multipatch data.

Analogously to multipatch objects, a gsMultiBasis object is a
collection of gsBasis classes together with topological information
such as boundaries and interfaces.

*/
}
